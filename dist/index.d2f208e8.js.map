{"mappings":"AEAA,iFAAiF;AACjF,uFAAuF;AACvF,6CAA6C;AAE7C,IAAI;AACJ,gBAAgB;AAChB,sBAAsB;AACtB,qBAAqB;AACrB,qEAAqE;AACrE,qBAAqB;AACrB,SAAS;AACT,mBAAmB;AACnB,UAAU;AACV,mBAAmB;AACnB,kCAAkC;AAClC,6BAA6B;AAC7B,8BAA8B;AAC9B,sBAAsB;AACtB,4BAA4B;AAC5B,sBAAsB;AACtB,6BAA6B;AAC7B,gEAAgE;AAChE,aAAa;AACb,wBAAwB;AACxB,6BAA6B;AAC7B,iEAAiE;AACjE,aAAa;AACb,8EAA8E;AAC9E,uBAAuB;AACvB,yDAAyD;AACzD,yDAAyD;AACzD,mBAAmB;AACnB,aAAa;AACb,gEAAgE;AAChE,gDAAgD;AAChD,WAAW;AACX,eAAe;AACf,QAAQ;AACR,MAAM;A,2D","sources":["<anon>","src/index.js","src/service.js"],"sourcesContent":["// esta clase se encargará de llamar de rick & morty para obtener todos los datos\n// el servicio tiene como endpoint de accesso https://rickandmortyapi.com/api/character\n// que tiene como respuesta el siguiente json\n// {\n//     \"info\": {\n//       \"count\": 826,\n//       \"pages\": 42,\n//       \"next\": \"https://rickandmortyapi.com/api/character/?page=2\",\n//       \"prev\": null\n//     },\n//     \"results\": [\n//       {\n//         \"id\": 1,\n//         \"name\": \"Rick Sanchez\",\n//         \"status\": \"Alive\",\n//         \"species\": \"Human\",\n//         \"type\": \"\",\n//         \"gender\": \"Male\",\n//         \"origin\": {\n//           \"name\": \"Earth\",\n//           \"url\": \"https://rickandmortyapi.com/api/location/1\"\n//         },\n//         \"location\": {\n//           \"name\": \"Earth\",\n//           \"url\": \"https://rickandmortyapi.com/api/location/20\"\n//         },\n//         \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\n//         \"episode\": [\n//           \"https://rickandmortyapi.com/api/episode/1\",\n//           \"https://rickandmortyapi.com/api/episode/2\",\n//           // ...\n//         ],\n//         \"url\": \"https://rickandmortyapi.com/api/character/1\",\n//         \"created\": \"2017-11-04T18:48:46.250Z\"\n//       },\n//       // ...\n//     ]\n//   }\nclass $2b036f15af3cb29a$var$RickAndMortyService {\n    // el constructor debe inicializar una variable con la url de acceso base al API\n    constructor(){}\n    // este método deberá llamar al servicio y obtener los personajes\n    // deberá devolver un objeto de la siguiente manera\n    // {\n    //     \"name\": \"Rick Sanchez\",\n    //     \"status\": \"Alive\",\n    //     \"species\": \"Human\",\n    //     \"firstSeen\": \"Earth\",\n    //     \"location\": \"Earth\",\n    //     \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\n    //     \"student\": \"aqui va el nombre del estudiante\",\n    //     \"code\": \"aqui va el codigo del estudiante\"\n    // }\n    // deberá realizar el respectivo manejo de error en caso de errores al llamar el API\n    // se recomienda usar el api fetch para obtener los datos como en el siguiente ejemplo  \n    // ejemplo con promesas\n    // fetch('miurl')\n    //  .then((respuesta) => respuesta.json())\n    //  .then((mispersonajes) => {\n    //     //aqui dentro mi logica\n    //  })\n    //  ejemplo con async/await\n    //  const response = await fetch('miurl');\n    //  const mispersonajes = await response.json();\n    // valor (1 punto)\n    getAllCharacters() {\n    // aqui va tu llamado al API usando fetch puedes usar promesas o asycn/await\n    }\n}\nvar $2b036f15af3cb29a$export$2e2bcd8739ae039 = $2b036f15af3cb29a$var$RickAndMortyService;\n\n\n// acá deberás crear una instancia del servicio RickAndMortyService\n// const service = new RickAndMortyService();\n// esta función debe encargarse de obtener el elemento contenedor\n// y agregar los personajes obtenidos por el API, deberás llamar tu función getAllCharacters\n// iterar el arreglo de personajes y llamar a la función createCharacterCard para agregar cada personaje\n// a el contenedor puedes usar la propiedad innerHTML para esto\n// valor (1 punto)\nfunction $35da740d59af89ba$var$createCharacterList() {\n// llamar primero createCharacterCard(character);\n// llamar segundo addCharacterListeners(character);\n}\n// esta función debe devolver la estructura html en string de tu personaje ejemplo\n// `<div class=\"character\">\n//      <span>${gender}</span>\n//      <span>${name}</span>\n// </div>`;\n// deberás usar los elementos correctos de HTML para poder visualizar el personaje\n// valor (1 punto) HTML\nfunction $35da740d59af89ba$var$createCharacterCard(character) {}\n// esta función deberá obtener todos los personajes y deberá agregarles un evento de click\n// cuando se seleccione un personaje debe decir hola soy 'nombre personaje', recuerda que puedes obtener\n// el elemento target de un evento y así obtener sus propiedades\nfunction $35da740d59af89ba$var$addCharacterListeners(character) {}\n// por último se llama la función y se renderiza la vista\n$35da740d59af89ba$var$createCharacterList();\n\n\n//# sourceMappingURL=index.d2f208e8.js.map\n","import RickAndMortyService from './service';\r\n\r\n\r\n// acá deberás crear una instancia del servicio RickAndMortyService\r\n// const service = new RickAndMortyService();\r\n\r\n// esta función debe encargarse de obtener el elemento contenedor\r\n// y agregar los personajes obtenidos por el API, deberás llamar tu función getAllCharacters\r\n// iterar el arreglo de personajes y llamar a la función createCharacterCard para agregar cada personaje\r\n// a el contenedor puedes usar la propiedad innerHTML para esto\r\n\r\n// valor (1 punto)\r\n\r\nfunction createCharacterList() {\r\n    // llamar primero createCharacterCard(character);\r\n    // llamar segundo addCharacterListeners(character);\r\n}\r\n\r\n// esta función debe devolver la estructura html en string de tu personaje ejemplo\r\n\r\n// `<div class=\"character\">\r\n//      <span>${gender}</span>\r\n//      <span>${name}</span>\r\n// </div>`;\r\n\r\n// deberás usar los elementos correctos de HTML para poder visualizar el personaje\r\n\r\n// valor (1 punto) HTML\r\n\r\nfunction createCharacterCard(character) {}\r\n\r\n// esta función deberá obtener todos los personajes y deberá agregarles un evento de click\r\n// cuando se seleccione un personaje debe decir hola soy 'nombre personaje', recuerda que puedes obtener\r\n// el elemento target de un evento y así obtener sus propiedades\r\n\r\nfunction addCharacterListeners(character) {}\r\n\r\n\r\n// por último se llama la función y se renderiza la vista\r\ncreateCharacterList();\r\n","// esta clase se encargará de llamar de rick & morty para obtener todos los datos\r\n// el servicio tiene como endpoint de accesso https://rickandmortyapi.com/api/character\r\n// que tiene como respuesta el siguiente json\r\n\r\n// {\r\n//     \"info\": {\r\n//       \"count\": 826,\r\n//       \"pages\": 42,\r\n//       \"next\": \"https://rickandmortyapi.com/api/character/?page=2\",\r\n//       \"prev\": null\r\n//     },\r\n//     \"results\": [\r\n//       {\r\n//         \"id\": 1,\r\n//         \"name\": \"Rick Sanchez\",\r\n//         \"status\": \"Alive\",\r\n//         \"species\": \"Human\",\r\n//         \"type\": \"\",\r\n//         \"gender\": \"Male\",\r\n//         \"origin\": {\r\n//           \"name\": \"Earth\",\r\n//           \"url\": \"https://rickandmortyapi.com/api/location/1\"\r\n//         },\r\n//         \"location\": {\r\n//           \"name\": \"Earth\",\r\n//           \"url\": \"https://rickandmortyapi.com/api/location/20\"\r\n//         },\r\n//         \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\r\n//         \"episode\": [\r\n//           \"https://rickandmortyapi.com/api/episode/1\",\r\n//           \"https://rickandmortyapi.com/api/episode/2\",\r\n//           // ...\r\n//         ],\r\n//         \"url\": \"https://rickandmortyapi.com/api/character/1\",\r\n//         \"created\": \"2017-11-04T18:48:46.250Z\"\r\n//       },\r\n//       // ...\r\n//     ]\r\n//   }\r\n\r\n\r\nclass RickAndMortyService {\r\n    // el constructor debe inicializar una variable con la url de acceso base al API\r\n\r\n\tconstructor() {}\r\n\r\n    \r\n    // este método deberá llamar al servicio y obtener los personajes\r\n    // deberá devolver un objeto de la siguiente manera\r\n\r\n    // {\r\n    //     \"name\": \"Rick Sanchez\",\r\n    //     \"status\": \"Alive\",\r\n    //     \"species\": \"Human\",\r\n    //     \"firstSeen\": \"Earth\",\r\n    //     \"location\": \"Earth\",\r\n    //     \"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\r\n    //     \"student\": \"aqui va el nombre del estudiante\",\r\n    //     \"code\": \"aqui va el codigo del estudiante\"\r\n    // }\r\n\r\n    // deberá realizar el respectivo manejo de error en caso de errores al llamar el API\r\n    // se recomienda usar el api fetch para obtener los datos como en el siguiente ejemplo  \r\n\r\n    // ejemplo con promesas\r\n\r\n    // fetch('miurl')\r\n    //  .then((respuesta) => respuesta.json())\r\n    //  .then((mispersonajes) => {\r\n    //     //aqui dentro mi logica\r\n    //  })\r\n\r\n    //  ejemplo con async/await\r\n\r\n    //  const response = await fetch('miurl');\r\n    //  const mispersonajes = await response.json();\r\n\r\n    // valor (1 punto)\r\n\tgetAllCharacters() {\r\n        // aqui va tu llamado al API usando fetch puedes usar promesas o asycn/await\r\n\t}\r\n}\r\n\r\nexport default RickAndMortyService;\r\n"],"names":[],"version":3,"file":"index.d2f208e8.js.map"}